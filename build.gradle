plugins {
	id 'fabric-loom' version '1.1.+'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
	id 'com.matthewprenger.cursegradle' version '1.4.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version + "+" + project.minecraft_version
group = project.maven_group

loom {
	accessWidenerPath = file("src/main/resources/polydex.accesswidener")
}

repositories {
	maven { url = "https://maven.fabricmc.net/" }
	maven { url = "https://maven.nucleoid.xyz/" }
	maven { url = 'https://jitpack.io' }
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
	maven { url 'https://maven.blamejared.com' }
	maven { url "https://maven.shedaniel.me" }

	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}

	maven {
		url = "https://maven.jamieswhiteshirt.com/libs-release/"
		content {
			includeGroup 'com.jamieswhiteshirt'
		}
	}

	maven {
		name = "AlexIIL"
		url = "https://maven.alexiil.uk/"
	}

	maven {
		url "https://www.cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}

	maven { url = 'https://api.modrinth.com/maven' }
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Server side stuff
	modImplementation include("eu.pb4:sgui:${project.sgui_version}")
	modImplementation include("eu.pb4:polymer-resource-pack:${project.polymer_version}")
	modImplementation include("eu.pb4:placeholder-api:${project.placeholder_version}")
	modImplementation include("eu.pb4:predicate-api:${project.predicate_version}")
	modImplementation include("eu.pb4:player-data-api:${project.player_data_version}")
	modImplementation include("eu.pb4:sidebar-api:${project.sidebar_version}")
	modImplementation include("xyz.nucleoid:server-translations-api:${project.stapi_version}")
	modImplementation include("me.lucko:fabric-permissions-api:0.1-SNAPSHOT")

	modCompileOnly "alexiil.mc.lib:libmultipart-all:0.11.0"

	modCompileOnly "eu.pb4:polymer-core:${project.polymer_version}"
	modLocalRuntime "eu.pb4:polymer-autohost:${project.polymer_version}"
	//modCompileOnly "dev.emi:emi-fabric:1.0.10+1.20.1"


	//modLocalRuntime 'maven.modrinth:goml-reserved:1.5.0-beta.1'
	//modLocalRuntime 'maven.modrinth:polymer-ports-waystones:2.4.1-polymerport.2'
}

processResources {
	inputs.property "version", project.version

	filesMatching('fabric.mod.json') {
		expand "version": project.version
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}
def env = System.getenv()

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
		repositories {
			if (env.MAVEN_URL) {
				maven {
					credentials {
						username env.MAVEN_USERNAME
						password env.MAVEN_PASSWORD
					}
					url env.MAVEN_URL
				}
			} else {
				mavenLocal()
			}
		}
	}
}


curseforge {
	if (System.getenv("CURSEFORGE")) {
		apiKey = System.getenv("CURSEFORGE")

		project {
			id = "580643"
			releaseType = "release"
			changelog = System.getenv("CHANGELOG")
			changelogType = "markdown"
			addGameVersion((project.minecraft_version.contains("-") ? ((String) project.minecraft_version.split("-")[0] + "-Snapshot") : project.minecraft_version))
			addGameVersion "Fabric"
			mainArtifact(remapJar)

			afterEvaluate {
				uploadTask.dependsOn("remapJar")
			}
		}
	}

	options {
		forgeGradleIntegration = false
	}

	remapJar {
		finalizedBy project.tasks.curseforge
	}
}

if (System.getenv("MODRINTH")) {
	modrinth {
		token = System.getenv("MODRINTH")
		projectId = 'm5NB7FJE'
		versionNumber = "" + version
		changelog = System.getenv("CHANGELOG")
		// On fabric, use 'remapJar' instead of 'jar'
		uploadFile = remapJar
		gameVersions = [((String) project.minecraft_version)]
		loaders = ["fabric", "quilt"]
	}

	remapJar {
		finalizedBy project.tasks.modrinth
	}
}
